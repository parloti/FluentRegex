<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentRegex</name>
    </assembly>
    <members>
        <member name="T:FluentRegex.Anchors">
            <summary>
            Anchors, or atomic zero-width assertions, specify a position in the string where a match must occur.
            </summary>
        </member>
        <member name="F:FluentRegex.Anchors.StartOfStringOrLine">
            <summary>
            By default, the match must occur at the beginning of the string; in multiline mode, it must occur at the beginning of the line.
            </summary>
        </member>
        <member name="F:FluentRegex.Anchors.EndOfStringOrLine">
            <summary>
            By default, the match must occur at the end of the string or before \n at the end of the string; in multiline mode, it must occur at the end of the line or before \n at the end of the line.
            </summary>
        </member>
        <member name="F:FluentRegex.Anchors.StartOfStringOnly">
            <summary>
            The match must occur at the beginning of the string only (no multiline support).
            </summary>
        </member>
        <member name="F:FluentRegex.Anchors.EndOfStringOrBeforeEndingNewline">
            <summary>
            The match must occur at the end of the string, or before \n at the end of the string.
            </summary>
        </member>
        <member name="F:FluentRegex.Anchors.EndOfStringOnly">
            <summary>
            The match must occur at the end of the string only.
            </summary>
        </member>
        <member name="F:FluentRegex.Anchors.ContiguousMatches">
            <summary>
            The match must start at the position where the previous match ended.
            </summary>
        </member>
        <member name="F:FluentRegex.Anchors.WordBoundary">
            <summary>
            The match must occur on a word boundary.
            </summary>
        </member>
        <member name="F:FluentRegex.Anchors.NonWordBoundary">
            <summary>
            The match must not occur on a word boundary.
            </summary>
        </member>
        <member name="T:FluentRegex.CharacterClass">
            <summary>
            Defines a set of characters.
            </summary>
        </member>
        <member name="M:FluentRegex.CharacterClass.ToString">
            <summary>
            Converts this instance to a regular expression pattern.
            </summary>
            <returns>A regular expression pattern.</returns>
        </member>
        <member name="P:FluentRegex.CharacterClass.Set">
            <summary>
            Characters from which another set can be subtracted
            </summary>
        </member>
        <member name="F:FluentRegex.CharacterClass.format">
            <summary>
            The pattern format.
            </summary>
        </member>
        <member name="M:FluentRegex.CharacterClass.#ctor(FluentRegex.CharacterGroup)">
            <summary>
            Creates e new instance of the class.
            </summary>
            <param name="characterGroup">A instance of the class <see cref="T:FluentRegex.CharacterGroup"/>.</param>
        </member>
        <member name="M:FluentRegex.CharacterClass.#ctor(System.String,System.Boolean)">
            <summary>
            Creates e new instance of the class.
            </summary>
            <param name="charClass">The set of characteres.</param>
            <param name="brackets">If the set should be surrounded by square bracktes.</param>
        </member>
        <member name="P:FluentRegex.CharacterClass.Any">
            <summary>
            Wildcard: Matches any single character.
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.Word">
            <summary>
            Matches any word character.
            Pattern: Default: "\w", ECMAScript: "[a-zA-Z_0-9]", Canonical: "[\p{L}\p{Mn}\p{Nd}\p{Pc}]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.ECMAScriptWord">
            <summary>
            Matches any alphanumeric or underscore character.
            Pattern: "[a-zA-Z_0-9]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.UnicodeWord">
            <summary>
            Matches any Unicode non word character.
            Pattern: "[^\p{L}\p{Mn}\p{Nd}\p{Pc}]".
            <para><see cref="P:FluentRegex.IUnicodeCategory.Letter"/> | <see cref="P:FluentRegex.IUnicodeCategory.NonspacingMark"/> | <see cref="P:FluentRegex.IUnicodeCategory.DecimalNumber"/> | <see cref="P:FluentRegex.IUnicodeCategory.ConnectorPunctuation"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.NonWord">
            <summary>
            Matches any non-word character.
            Pattern: Default: "\W", ECMAScript: "[^a-zA-Z_0-9]", Canonical: "[^\p{L}\p{Mn}\p{Nd}\p{Pc}]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.ECMAScriptNonWord">
            <summary>
            Matches any non alphanumeric or underscore character.
            Pattern: "[^a-zA-Z_0-9]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.UnicodeNonWord">
            <summary>
            Matches any non Unicode word character.
            Pattern: "[^\p{L}\p{Mn}\p{Nd}\p{Pc}]".
            <para><see cref="P:FluentRegex.IUnicodeCategory.Letter"/> | <see cref="P:FluentRegex.IUnicodeCategory.NonspacingMark"/> | <see cref="P:FluentRegex.IUnicodeCategory.DecimalNumber"/> | <see cref="P:FluentRegex.IUnicodeCategory.ConnectorPunctuation"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.WhiteSpace">
            <summary>
            Matches any white-space character.
            Pattern: Default: "\s", ECMAScript: "[ \f\n\r\t\v]", Canonical: "[\f\n\r\t\v\x85\p{Z}]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.ECMAScriptWhiteSpace">
            <summary>
            Matches any white-space character.
            Pattern: "[ \f\n\r\t\v]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.UnicodeWhiteSpace">
            <summary>
            Matches any white-space character.
            Pattern: "[\f\n\r\t\v\x85\p{Z}]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.NonWhiteSpace">
            <summary>
            Matches any non-white-space character.
            Pattern: Default: "\S", ECMAScript: "[^ \f\n\r\t\v]", Canonical: "[^\f\n\r\t\v\x85\p{Z}]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.ECMAScriptNonWhiteSpace">
            <summary>
            Matches any non-white-space character.
            Pattern: "[^ \f\n\r\t\v]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.UnicodeNonWhiteSpace">
            <summary>
            Matches any non-white-space character.
            Pattern: "[^\f\n\r\t\v\x85\p{Z}]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.Digit">
            <summary>
            Matches any decimal digit.
            Pattern: Default: "\d", ECMAScript: "[0-9]", Canonical: "\p{Nd}".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.ECMAScriptDigit">
            <summary>
            Matches any decimal digit.
            Pattern: "[0-9]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.UnicodeDigit">
            <summary>
            Matches any decimal digit.
            Pattern: "\p{Nd}".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.NonDigit">
            <summary>
            Matches any character other than a decimal digit.
            </summary>
            Pattern: Default: "\D", ECMAScript: "[^0-9]", Canonical: "\P{Nd}".
        </member>
        <member name="P:FluentRegex.CharacterClass.ECMAScriptNonDigit">
            <summary>
            Matches any character other than a decimal digit.
            Pattern: "[^0-9]".
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterClass.UnicodeNonDigit">
            <summary>
            Matches any character other than a decimal digit.
            Pattern: "\P{Nd}".
            </summary>
        </member>
        <member name="T:FluentRegex.CharacterGroup">
            <summary>
            A character class defines a set of characters, any one of which can occur in an input string for a match to succeed.
            </summary>
        </member>
        <member name="M:FluentRegex.CharacterGroup.ToString">
            <summary>
            Converts this instance to a regular expression pattern that can be passed to a <see cref="T:System.Text.RegularExpressions.Regex"/> constructor.
            </summary>
            <returns>A regular expression character class.</returns>
        </member>
        <member name="P:FluentRegex.CharacterGroup.Set">
            <summary>
            Regular expression pattern builder.
            </summary>
        </member>
        <member name="P:FluentRegex.CharacterGroup.Prefix">
            <summary>
            A prefix to the character set to indicate whether the group is positive or negative.
            </summary>
        </member>
        <member name="M:FluentRegex.CharacterGroup.Add(System.String,System.Boolean)">
            <summary>
            Adds a trivial term to the expression.
            </summary>
            <param name="term">Term to be added to the expression.</param>
            <param name="escape">Indicates whether the character set (\, *, +, ?, |, {, [, (,), ^, $, ., #, and white space) should be replaced with their escape codes.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.CharacterGroup.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.CharacterGroup"/> class that has a set of characters specified individually.
            </summary>
            <param name="set">The set of characters to be matched.</param>
            <param name="escape">Indicates whether the character set (\, *, +, ?, |, {, [, (,), ^, $, ., #, and white space) should be replaced with their escape codes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:FluentRegex.CharacterGroup.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.CharacterGroup"/> class that has a set of characters specified individually.
            </summary>
            <param name="set">The set of characters to be matched.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is empty.</exception>
        </member>
        <member name="M:FluentRegex.CharacterGroup.#ctor(System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.CharacterGroup"/> class that has a set of characters specified as a range.
            </summary>
            <param name="first">The first character in the range.</param>
            <param name="last">The last character in the range.</param>
            <param name="caseSensitive">If it must be case-sensitive.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
        </member>
        <member name="M:FluentRegex.CharacterGroup.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.CharacterGroup"/> class that has a set of decimal digits specified as a range.
            </summary>
            <param name="first">The first digit in the range.</param>
            <param name="last">The last digit in the range.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="first"/> or <paramref name="last"/> are greater as 9.</exception>
        </member>
        <member name="T:FluentRegex.NegativeCharacterGroup">
            <summary>
            A negative character group specifies a list of characters that must not appear in an input string for a match to occur.
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeCharacterGroup.Prefix">
            <summary>
            A prefix to the character set to indicate whether the group is positive or negative.
            </summary>
        </member>
        <member name="M:FluentRegex.NegativeCharacterGroup.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.NegativeCharacterGroup"/> class that has a set of characters specified individually.
            </summary>
            <param name="set">The set of characters to be not matched.</param>
            <param name="escape">Indicates whether the character set (\, *, +, ?, |, {, [, (,), ^, $, ., #, and white space) should be replaced with their escape codes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:FluentRegex.NegativeCharacterGroup.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.NegativeCharacterGroup"/> class that has a set of characters specified individually.
            </summary>
            <param name="set">The set of characters to be not matched.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is empty.</exception>
        </member>
        <member name="M:FluentRegex.NegativeCharacterGroup.#ctor(System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.NegativeCharacterGroup"/> class that has a set of characters specified as a range.
            </summary>
            <param name="first">The first character in the range.</param>
            <param name="last">The last character in the range.</param>
            <param name="caseSensitive">If it must be case-sensitive.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
        </member>
        <member name="M:FluentRegex.NegativeCharacterGroup.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.NegativeCharacterGroup"/> class that has a set of decimal digits specified as a range.
            </summary>
            <param name="first">The first digit in the range.</param>
            <param name="last">The last digit in the range.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="first"/> or <paramref name="last"/> are greater as 9.</exception>
        </member>
        <member name="T:FluentRegex.NegativeUnicodeBlock">
            <summary>
            Unicode named blocks values list.
            </summary>
            <remarks>
            Based on: 
            https://www.unicode.org/Public/UNIDATA/Blocks.txt, 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.3#supported-named-blocks and 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.8#supported-named-blocks.
            Accessed in: 26/05/2019.
            </remarks>
        </member>
        <member name="M:FluentRegex.NegativeUnicodeBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.NegativeUnicodeBlock"/> class.
            </summary>
            <param name="name">The block name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.BasicLatin">
            <summary>
            0000 - 007F. Value: "\p{IsBasicLatin}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Latin1Supplement">
            <summary>
            0080 - 00FF. Value: "\p{IsLatin-1Supplement}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.LatinExtendedA">
            <summary>
            0100 - 017F. Value: "\p{IsLatinExtended-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.LatinExtendedB">
            <summary>
            0180 - 024F. Value: "\p{IsLatinExtended-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.IPAExtensions">
            <summary>
            0250 - 02AF. Value: "\p{IsIPAExtensions}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.SpacingModifierLetters">
            <summary>
            02B0 - 02FF. Value: "\p{IsSpacingModifierLetters}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CombiningDiacriticalMarks">
            <summary>
            0300 - 036F. Value: "\p{IsCombiningDiacriticalMarks}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.GreekandCoptic">
            <summary>
            0370 - 03FF. Value: "\p{IsGreek}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.IsGreekandCoptic">
            <summary>
            0370 - 03FF. Value: "\p{IsGreekandCoptic}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Cyrillic">
            <summary>
            0400 - 04FF. Value: "\p{IsCyrillic}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CyrillicSupplement">
            <summary>
            0500 - 052F. Value: "\p{IsCyrillicSupplement}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Armenian">
            <summary>
            0530 - 058F. Value: "\p{IsArmenian}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Hebrew">
            <summary>
            0590 - 05FF. Value: "\p{IsHebrew}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Arabic">
            <summary>
            0600 - 06FF. Value: "\p{IsArabic}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Syriac">
            <summary>
            0700 - 074F. Value: "\p{IsSyriac}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Thaana">
            <summary>
            0780 - 07BF. Value: "\p{IsThaana}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Devanagari">
            <summary>
            0900 - 097F. Value: "\p{IsDevanagari}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Bengali">
            <summary>
            0980 - 09FF. Value: "\p{IsBengali}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Gurmukhi">
            <summary>
            0A00 - 0A7F. Value: "\p{IsGurmukhi}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Gujarati">
            <summary>
            0A80 - 0AFF. Value: "\p{IsGujarati}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Oriya">
            <summary>
            0B00 - 0B7F. Value: "\p{IsOriya}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Tamil">
            <summary>
            0B80 - 0BFF. Value: "\p{IsTamil}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Telugu">
            <summary>
            0C00 - 0C7F. Value: "\p{IsTelugu}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Kannada">
            <summary>
            0C80 - 0CFF. Value: "\p{IsKannada}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Malayalam">
            <summary>
            0D00 - 0D7F. Value: "\p{IsMalayalam}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Sinhala">
            <summary>
            0D80 - 0DFF. Value: "\p{IsSinhala}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Thai">
            <summary>
            0E00 - 0E7F. Value: "\p{IsThai}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Lao">
            <summary>
            0E80 - 0EFF. Value: "\p{IsLao}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Tibetan">
            <summary>
            0F00 - 0FFF. Value: "\p{IsTibetan}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Myanmar">
            <summary>
            1000 - 109F. Value: "\p{IsMyanmar}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Georgian">
            <summary>
            10A0 - 10FF. Value: "\p{IsGeorgian}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.HangulJamo">
            <summary>
            1100 - 11FF. Value: "\p{IsHangulJamo}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Ethiopic">
            <summary>
            1200 - 137F. Value: "\p{IsEthiopic}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Cherokee">
            <summary>
            13A0 - 13FF. Value: "\p{IsCherokee}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.UnifiedCanadianAboriginalSyllabics">
            <summary>
            1400 - 167F. Value: "\p{IsUnifiedCanadianAboriginalSyllabics}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Ogham">
            <summary>
            1680 - 169F. Value: "\p{IsOgham}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Runic">
            <summary>
            16A0 - 16FF. Value: "\p{IsRunic}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Tagalog">
            <summary>
            1700 - 171F. Value: "\p{IsTagalog}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Hanunoo">
            <summary>
            1720 - 173F. Value: "\p{IsHanunoo}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Buhid">
            <summary>
            1740 - 175F. Value: "\p{IsBuhid}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Tagbanwa">
            <summary>
            1760 - 177F. Value: "\p{IsTagbanwa}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Khmer">
            <summary>
            1780 - 17FF. Value: "\p{IsKhmer}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Mongolian">
            <summary>
            1800 - 18AF. Value: "\p{IsMongolian}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Limbu">
            <summary>
            1900 - 194F. Value: "\p{IsLimbu}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.TaiLe">
            <summary>
            1950 - 197F. Value: "\p{IsTaiLe}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.KhmerSymbols">
            <summary>
            19E0 - 19FF. Value: "\p{IsKhmerSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.PhoneticExtensions">
            <summary>
            1D00 - 1D7F. Value: "\p{IsPhoneticExtensions}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.LatinExtendedAdditional">
            <summary>
            1E00 - 1EFF. Value: "\p{IsLatinExtendedAdditional}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.GreekExtended">
            <summary>
            1F00 - 1FFF. Value: "\p{IsGreekExtended}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.GeneralPunctuation">
            <summary>
            2000 - 206F. Value: "\p{IsGeneralPunctuation}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.SuperscriptsandSubscripts">
            <summary>
            2070 - 209F. Value: "\p{IsSuperscriptsandSubscripts}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CurrencySymbols">
            <summary>
            20A0 - 20CF. Value: "\p{IsCurrencySymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CombiningDiacriticalMarksforSymbols">
            <summary>
            20D0 - 20FF. Value: "\p{IsCombiningDiacriticalMarksforSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.IsCombiningMarksforSymbols">
            <summary>
            20D0 - 20FF. Value: "\p{"IsCombiningMarksforSymbols"}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.LetterlikeSymbols">
            <summary>
            2100 - 214F. Value: "\p{IsLetterlikeSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.NumberForms">
            <summary>
            2150 - 218F. Value: "\p{IsNumberForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Arrows">
            <summary>
            2190 - 21FF. Value: "\p{IsArrows}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.MathematicalOperators">
            <summary>
            2200 - 22FF. Value: "\p{IsMathematicalOperators}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.MiscellaneousTechnical">
            <summary>
            2300 - 23FF. Value: "\p{IsMiscellaneousTechnical}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.ControlPictures">
            <summary>
            2400 - 243F. Value: "\p{IsControlPictures}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.OpticalCharacterRecognition">
            <summary>
            2440 - 245F. Value: "\p{IsOpticalCharacterRecognition}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.EnclosedAlphanumerics">
            <summary>
            2460 - 24FF. Value: "\p{IsEnclosedAlphanumerics}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.BoxDrawing">
            <summary>
            2500 - 257F. Value: "\p{IsBoxDrawing}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.BlockElements">
            <summary>
            2580 - 259F. Value: "\p{IsBlockElements}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.GeometricShapes">
            <summary>
            25A0 - 25FF. Value: "\p{IsGeometricShapes}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.MiscellaneousSymbols">
            <summary>
            2600 - 26FF. Value: "\p{IsMiscellaneousSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Dingbats">
            <summary>
            2700 - 27BF. Value: "\p{IsDingbats}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.MiscellaneousMathematicalSymbolsA">
            <summary>
            27C0 - 27EF. Value: "\p{IsMiscellaneousMathematicalSymbols-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.SupplementalArrowsA">
            <summary>
            27F0 - 27FF. Value: "\p{IsSupplementalArrows-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.BraillePatterns">
            <summary>
            2800 - 28FF. Value: "\p{IsBraillePatterns}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.SupplementalArrowsB">
            <summary>
            2900 - 297F. Value: "\p{IsSupplementalArrows-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.MiscellaneousMathematicalSymbolsB">
            <summary>
            2980 - 29FF. Value: "\p{IsMiscellaneousMathematicalSymbols-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.SupplementalMathematicalOperators">
            <summary>
            2A00 - 2AFF. Value: "\p{IsSupplementalMathematicalOperators}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.MiscellaneousSymbolsandArrows">
            <summary>
            2B00 - 2BFF. Value: "\p{IsMiscellaneousSymbolsandArrows}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CJKRadicalsSupplement">
            <summary>
            2E80 - 2EFF. Value: "\p{IsCJKRadicalsSupplement}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.KangxiRadicals">
            <summary>
            2F00 - 2FDF. Value: "\p{IsKangxiRadicals}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.IdeographicDescriptionCharacters">
            <summary>
            2FF0 - 2FFF. Value: "\p{IsIdeographicDescriptionCharacters}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CJKSymbolsandPunctuation">
            <summary>
            3000 - 303F. Value: "\p{IsCJKSymbolsandPunctuation}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Hiragana">
            <summary>
            3040 - 309F. Value: "\p{IsHiragana}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Katakana">
            <summary>
            30A0 - 30FF. Value: "\p{IsKatakana}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Bopomofo">
            <summary>
            3100 - 312F. Value: "\p{IsBopomofo}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.HangulCompatibilityJamo">
            <summary>
            3130 - 318F. Value: "\p{IsHangulCompatibilityJamo}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Kanbun">
            <summary>
            3190 - 319F. Value: "\p{IsKanbun}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.BopomofoExtended">
            <summary>
            31A0 - 31BF. Value: "\p{IsBopomofoExtended}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.KatakanaPhoneticExtensions">
            <summary>
            31F0 - 31FF. Value: "\p{IsKatakanaPhoneticExtensions}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.EnclosedCJKLettersandMonths">
            <summary>
            3200 - 32FF. Value: "\p{IsEnclosedCJKLettersandMonths}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CJKCompatibility">
            <summary>
            3300 - 33FF. Value: "\p{IsCJKCompatibility}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CJKUnifiedIdeographsExtensionA">
            <summary>
            3400 - 4DBF. Value: "\p{IsCJKUnifiedIdeographsExtensionA}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.YijingHexagramSymbols">
            <summary>
            4DC0 - 4DFF. Value: "\p{IsYijingHexagramSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CJKUnifiedIdeographs">
            <summary>
            4E00 - 9FFF. Value: "\p{IsCJKUnifiedIdeographs}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.YiSyllables">
            <summary>
            A000 - A48F. Value: "\p{IsYiSyllables}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.YiRadicals">
            <summary>
            A490 - A4CF. Value: "\p{IsYiRadicals}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.HangulSyllables">
            <summary>
            AC00 - D7AF. Value: "\p{IsHangulSyllables}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.HighSurrogates">
            <summary>
            D800 - DB7F. Value: "\p{IsHighSurrogates}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.HighPrivateUseSurrogates">
            <summary>
            DB80 - DBFF. Value: "\p{IsHighPrivateUseSurrogates}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.LowSurrogates">
            <summary>
            DC00 - DFFF. Value: "\p{IsLowSurrogates}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.PrivateUse">
            <summary>
            E000 - F8FF. Value: "\p{IsPrivateUse}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.PrivateUseArea">
            <summary>
            E000 - F8FF. Value: "\p{IsPrivateUseArea}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CJKCompatibilityIdeographs">
            <summary>
            F900 - FAFF. Value: "\p{IsCJKCompatibilityIdeographs}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.AlphabeticPresentationForms">
            <summary>
            FB00 - FB4F. Value: "\p{IsAlphabeticPresentationForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.ArabicPresentationFormsA">
            <summary>
            FB50 - FDFF. Value: "\p{IsArabicPresentationForms-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.VariationSelectors">
            <summary>
            FE00 - FE0F. Value: "\p{IsVariationSelectors}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CombiningHalfMarks">
            <summary>
            FE20 - FE2F. Value: "\p{IsCombiningHalfMarks}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.CJKCompatibilityForms">
            <summary>
            FE30 - FE4F. Value: "\p{IsCJKCompatibilityForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.SmallFormVariants">
            <summary>
            FE50 - FE6F. Value: "\p{IsSmallFormVariants}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.ArabicPresentationFormsB">
            <summary>
            FE70 - FEFF. Value: "\p{IsArabicPresentationForms-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.HalfwidthandFullwidthForms">
            <summary>
            FF00 - FFEF. Value: "\p{IsHalfwidthandFullwidthForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeBlock.Specials">
            <summary>
            FFF0 - FFFF. Value: "\p{IsSpecials}".
            </summary>
        </member>
        <member name="T:FluentRegex.NegativeUnicodeCategory">
            <summary>
            Unicode general categories values list.
            </summary>
            <remarks>
            Based on: 
            https://www.unicode.org/reports/tr44/#General_Category_Values, 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.3#SupportedUnicodeGeneralCategories and 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.8#SupportedUnicodeGeneralCategories.
            Accessed in: 26/05/2019.
            </remarks>
        </member>
        <member name="M:FluentRegex.NegativeUnicodeCategory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.NegativeUnicodeCategory"/> class.
            </summary>
            <param name="name">The category name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/> or consists only of white-space characters.</exception>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.UppercaseLetter">
            <summary>
            An uppercase letter. Value: "Lu".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.LowercaseLetter">
            <summary>
            A lowercase letter. Value : "Ll".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.TitlecaseLetter">
            <summary>
            A digraphic character, with first part uppercase. Value: "Lt"
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.ModifierLetter">
            <summary>
            A modifier letter. Value: "Lm".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.OtherLetter">
            <summary>
            Other letters, including syllables and ideographs. Value: "Lo".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Letter">
            <summary>
            All letter characters. Value: "L" ("Lu | Ll | Lt | Lm | Lo").
            <para><see cref="P:FluentRegex.NegativeUnicodeCategory.UppercaseLetter"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.LowercaseLetter"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.TitlecaseLetter"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.ModifierLetter"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.OtherLetter"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.NonspacingMark">
            <summary>
             A nonspacing combining mark (zero advance width). Value: "Mn".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.SpacingMark">
            <summary>
            A spacing combining mark (positive advance width). Value: "Mc".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.EnclosingMark">
            <summary>
            An enclosing combining mark. Value: "Me".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Mark">
            <summary>
            All diacritic marks. Value: "M" ("Mn | Mc | Me").
            <para><see cref="P:FluentRegex.NegativeUnicodeCategory.NonspacingMark"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.SpacingMark"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.EnclosingMark"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.DecimalNumber">
            <summary>
            A decimal digit. Value: "Nd".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.LetterNumber">
            <summary>
            A letterlike numeric character. Value: "Nl".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.OtherNumber">
            <summary>
            A numeric character of other type. Value: "No".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Number">
            <summary>
            All numbers. Value: "N" ("Nd | Nl | No").
            <para><see cref="P:FluentRegex.NegativeUnicodeCategory.DecimalNumber"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.LetterNumber"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.OtherNumber"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.ConnectorPunctuation">
            <summary>
            A connecting punctuation mark, like a tie. Value: "Pc".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.DashPunctuation">
            <summary>
            A dash or hyphen punctuation mark. Value: "Pd".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.OpenPunctuation">
            <summary>
            An opening punctuation mark(of a pair). Value: "Ps".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.ClosePunctuation">
            <summary>
            A closing punctuation mark(of a pair). Value: "Pe".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.InitialPunctuation">
            <summary>
            An initial quotation mark. Value: "Pi".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.FinalPunctuation">
            <summary>
            A final quotation mark. Value: "Pf"
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.OtherPunctuation">
            <summary>
            A punctuation mark of other type. Value: "Po"
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Punctuation">
            <summary>
            All punctuation characters. Value : "P" ("Pc | Pd | Ps | Pe | Pi | Pf | Po").
            <para><see cref="P:FluentRegex.NegativeUnicodeCategory.ConnectorPunctuation"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.DashPunctuation"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.OpenPunctuation"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.ClosePunctuation"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.InitialPunctuation"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.FinalPunctuation"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.OtherPunctuation"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.MathSymbol">
            <summary>
            A symbol of mathematical use. Value: "Sm".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.CurrencySymbol">
            <summary>
            A currency sign. Value: "Sc".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.ModifierSymbol">
            <summary>
            A non-letterlike modifier symbol. Value: "Sk".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.OtherSymbol">
            <summary>
            A symbol of other type. Value: "So".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Symbol">
            <summary>
            All symbols. Value: "S" ("Sm | Sc | Sk | So").
            <para><see cref="P:FluentRegex.NegativeUnicodeCategory.MathSymbol"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.CurrencySymbol"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.ModifierSymbol"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.OtherSymbol"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.SpaceSeparator">
            <summary>
            A space character(of various non-zero widths). Value: "Zs".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.LineSeparator">
            <summary>
            U+2028 LINE SEPARATOR only. Value: "Zl".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.ParagraphSeparator">
            <summary>
            U+2029 PARAGRAPH SEPARATOR only. Value: "Zp".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Separator">
            <summary>
            All separator characters. Value: "Z" ("Zs | Zl | Zp").
            <para><see cref="P:FluentRegex.NegativeUnicodeCategory.SpaceSeparator"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.LineSeparator"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.ParagraphSeparator"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Control">
            <summary>
            A C0 or C1 control code. Value: "Cc".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Format">
            <summary>
            A format control character. Value: "Cf".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Surrogate">
            <summary>
            A surrogate code point. Value: "Cs".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.PrivateUse">
            <summary>
            A private-use character. Value: "Co".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Unassigned">
            <summary>
            A reserved unassigned code point or a noncharacter. Value: "Cn".
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeCategory.Other">
            <summary>
            All control characters. Value "C" ("Cc | Cf | Cs | Co | Cn").
            <para><see cref="P:FluentRegex.NegativeUnicodeCategory.Control"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.Format"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.Surrogate"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.PrivateUse"/> | <see cref="P:FluentRegex.NegativeUnicodeCategory.Unassigned"/>.</para>
            </summary>
        </member>
        <member name="T:FluentRegex.NegativeUnicodeGroup">
            <summary>
            Negative Unicode named groups base class.
            </summary>
        </member>
        <member name="P:FluentRegex.NegativeUnicodeGroup.CompositeFormat">
            <summary>
            The regular expression format.
            </summary>
        </member>
        <member name="M:FluentRegex.NegativeUnicodeGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.NegativeUnicodeGroup"/> class.
            </summary>
            <param name="name">The block name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/> or consists only of white-space characters.</exception>
        </member>
        <member name="T:FluentRegex.PositiveCharacterGroup">
            <summary>
            A positive character group specifies a list of characters, any one of which may appear in an input string for a match to occur.
            </summary>
        </member>
        <member name="M:FluentRegex.PositiveCharacterGroup.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.PositiveCharacterGroup"/> class that has a set of characters specified individually.
            </summary>
            <param name="set">The set of characters to be matched.</param>
            <param name="escape">Indicates whether the character set (\, *, +, ?, |, {, [, (,), ^, $, ., #, and white space) should be replaced with their escape codes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:FluentRegex.PositiveCharacterGroup.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.PositiveCharacterGroup"/> class that has a set of characters specified individually.
            </summary>
            <param name="set">The set of characters to be matched.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is empty.</exception>
        </member>
        <member name="M:FluentRegex.PositiveCharacterGroup.#ctor(System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.PositiveCharacterGroup"/> class that has a set of characters specified as a range.
            </summary>
            <param name="first">The first character in the range.</param>
            <param name="last">The last character in the range.</param>
            <param name="caseSensitive">If it must be case-sensitive.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
        </member>
        <member name="M:FluentRegex.PositiveCharacterGroup.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.PositiveCharacterGroup"/> class that has a set of decimal digits specified as a range.
            </summary>
            <param name="first">The first digit in the range.</param>
            <param name="last">The last digit in the range.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="first"/> or <paramref name="last"/> are greater as 9.</exception>
        </member>
        <member name="M:FluentRegex.PositiveCharacterGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.PositiveCharacterGroup"/> class that has all characters as set.
            </summary>
        </member>
        <member name="T:FluentRegex.PositiveUnicodeBlock">
            <summary>
            Unicode named blocks values list.
            </summary>
            <remarks>
            Based on: 
            https://www.unicode.org/Public/UNIDATA/Blocks.txt, 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.3#supported-named-blocks and 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.8#supported-named-blocks.
            Accessed in: 26/05/2019.
            </remarks>
        </member>
        <member name="M:FluentRegex.PositiveUnicodeBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.PositiveUnicodeBlock"/> class.
            </summary>
            <param name="name">The block name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/> or consists only of white-space characters.</exception>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.BasicLatin">
            <summary>
            0000 - 007F. Value: "\p{IsBasicLatin}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Latin1Supplement">
            <summary>
            0080 - 00FF. Value: "\p{IsLatin-1Supplement}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.LatinExtendedA">
            <summary>
            0100 - 017F. Value: "\p{IsLatinExtended-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.LatinExtendedB">
            <summary>
            0180 - 024F. Value: "\p{IsLatinExtended-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.IPAExtensions">
            <summary>
            0250 - 02AF. Value: "\p{IsIPAExtensions}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.SpacingModifierLetters">
            <summary>
            02B0 - 02FF. Value: "\p{IsSpacingModifierLetters}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CombiningDiacriticalMarks">
            <summary>
            0300 - 036F. Value: "\p{IsCombiningDiacriticalMarks}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.GreekandCoptic">
            <summary>
            0370 - 03FF. Value: "\p{IsGreek}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.IsGreekandCoptic">
            <summary>
            0370 - 03FF. Value: "\p{IsGreekandCoptic}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Cyrillic">
            <summary>
            0400 - 04FF. Value: "\p{IsCyrillic}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CyrillicSupplement">
            <summary>
            0500 - 052F. Value: "\p{IsCyrillicSupplement}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Armenian">
            <summary>
            0530 - 058F. Value: "\p{IsArmenian}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Hebrew">
            <summary>
            0590 - 05FF. Value: "\p{IsHebrew}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Arabic">
            <summary>
            0600 - 06FF. Value: "\p{IsArabic}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Syriac">
            <summary>
            0700 - 074F. Value: "\p{IsSyriac}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Thaana">
            <summary>
            0780 - 07BF. Value: "\p{IsThaana}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Devanagari">
            <summary>
            0900 - 097F. Value: "\p{IsDevanagari}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Bengali">
            <summary>
            0980 - 09FF. Value: "\p{IsBengali}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Gurmukhi">
            <summary>
            0A00 - 0A7F. Value: "\p{IsGurmukhi}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Gujarati">
            <summary>
            0A80 - 0AFF. Value: "\p{IsGujarati}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Oriya">
            <summary>
            0B00 - 0B7F. Value: "\p{IsOriya}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Tamil">
            <summary>
            0B80 - 0BFF. Value: "\p{IsTamil}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Telugu">
            <summary>
            0C00 - 0C7F. Value: "\p{IsTelugu}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Kannada">
            <summary>
            0C80 - 0CFF. Value: "\p{IsKannada}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Malayalam">
            <summary>
            0D00 - 0D7F. Value: "\p{IsMalayalam}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Sinhala">
            <summary>
            0D80 - 0DFF. Value: "\p{IsSinhala}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Thai">
            <summary>
            0E00 - 0E7F. Value: "\p{IsThai}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Lao">
            <summary>
            0E80 - 0EFF. Value: "\p{IsLao}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Tibetan">
            <summary>
            0F00 - 0FFF. Value: "\p{IsTibetan}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Myanmar">
            <summary>
            1000 - 109F. Value: "\p{IsMyanmar}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Georgian">
            <summary>
            10A0 - 10FF. Value: "\p{IsGeorgian}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.HangulJamo">
            <summary>
            1100 - 11FF. Value: "\p{IsHangulJamo}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Ethiopic">
            <summary>
            1200 - 137F. Value: "\p{IsEthiopic}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Cherokee">
            <summary>
            13A0 - 13FF. Value: "\p{IsCherokee}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.UnifiedCanadianAboriginalSyllabics">
            <summary>
            1400 - 167F. Value: "\p{IsUnifiedCanadianAboriginalSyllabics}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Ogham">
            <summary>
            1680 - 169F. Value: "\p{IsOgham}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Runic">
            <summary>
            16A0 - 16FF. Value: "\p{IsRunic}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Tagalog">
            <summary>
            1700 - 171F. Value: "\p{IsTagalog}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Hanunoo">
            <summary>
            1720 - 173F. Value: "\p{IsHanunoo}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Buhid">
            <summary>
            1740 - 175F. Value: "\p{IsBuhid}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Tagbanwa">
            <summary>
            1760 - 177F. Value: "\p{IsTagbanwa}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Khmer">
            <summary>
            1780 - 17FF. Value: "\p{IsKhmer}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Mongolian">
            <summary>
            1800 - 18AF. Value: "\p{IsMongolian}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Limbu">
            <summary>
            1900 - 194F. Value: "\p{IsLimbu}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.TaiLe">
            <summary>
            1950 - 197F. Value: "\p{IsTaiLe}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.KhmerSymbols">
            <summary>
            19E0 - 19FF. Value: "\p{IsKhmerSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.PhoneticExtensions">
            <summary>
            1D00 - 1D7F. Value: "\p{IsPhoneticExtensions}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.LatinExtendedAdditional">
            <summary>
            1E00 - 1EFF. Value: "\p{IsLatinExtendedAdditional}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.GreekExtended">
            <summary>
            1F00 - 1FFF. Value: "\p{IsGreekExtended}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.GeneralPunctuation">
            <summary>
            2000 - 206F. Value: "\p{IsGeneralPunctuation}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.SuperscriptsandSubscripts">
            <summary>
            2070 - 209F. Value: "\p{IsSuperscriptsandSubscripts}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CurrencySymbols">
            <summary>
            20A0 - 20CF. Value: "\p{IsCurrencySymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CombiningDiacriticalMarksforSymbols">
            <summary>
            20D0 - 20FF. Value: "\p{IsCombiningDiacriticalMarksforSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.IsCombiningMarksforSymbols">
            <summary>
            20D0 - 20FF. Value: "\p{"IsCombiningMarksforSymbols"}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.LetterlikeSymbols">
            <summary>
            2100 - 214F. Value: "\p{IsLetterlikeSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.NumberForms">
            <summary>
            2150 - 218F. Value: "\p{IsNumberForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Arrows">
            <summary>
            2190 - 21FF. Value: "\p{IsArrows}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.MathematicalOperators">
            <summary>
            2200 - 22FF. Value: "\p{IsMathematicalOperators}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.MiscellaneousTechnical">
            <summary>
            2300 - 23FF. Value: "\p{IsMiscellaneousTechnical}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.ControlPictures">
            <summary>
            2400 - 243F. Value: "\p{IsControlPictures}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.OpticalCharacterRecognition">
            <summary>
            2440 - 245F. Value: "\p{IsOpticalCharacterRecognition}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.EnclosedAlphanumerics">
            <summary>
            2460 - 24FF. Value: "\p{IsEnclosedAlphanumerics}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.BoxDrawing">
            <summary>
            2500 - 257F. Value: "\p{IsBoxDrawing}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.BlockElements">
            <summary>
            2580 - 259F. Value: "\p{IsBlockElements}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.GeometricShapes">
            <summary>
            25A0 - 25FF. Value: "\p{IsGeometricShapes}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.MiscellaneousSymbols">
            <summary>
            2600 - 26FF. Value: "\p{IsMiscellaneousSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Dingbats">
            <summary>
            2700 - 27BF. Value: "\p{IsDingbats}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.MiscellaneousMathematicalSymbolsA">
            <summary>
            27C0 - 27EF. Value: "\p{IsMiscellaneousMathematicalSymbols-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.SupplementalArrowsA">
            <summary>
            27F0 - 27FF. Value: "\p{IsSupplementalArrows-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.BraillePatterns">
            <summary>
            2800 - 28FF. Value: "\p{IsBraillePatterns}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.SupplementalArrowsB">
            <summary>
            2900 - 297F. Value: "\p{IsSupplementalArrows-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.MiscellaneousMathematicalSymbolsB">
            <summary>
            2980 - 29FF. Value: "\p{IsMiscellaneousMathematicalSymbols-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.SupplementalMathematicalOperators">
            <summary>
            2A00 - 2AFF. Value: "\p{IsSupplementalMathematicalOperators}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.MiscellaneousSymbolsandArrows">
            <summary>
            2B00 - 2BFF. Value: "\p{IsMiscellaneousSymbolsandArrows}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CJKRadicalsSupplement">
            <summary>
            2E80 - 2EFF. Value: "\p{IsCJKRadicalsSupplement}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.KangxiRadicals">
            <summary>
            2F00 - 2FDF. Value: "\p{IsKangxiRadicals}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.IdeographicDescriptionCharacters">
            <summary>
            2FF0 - 2FFF. Value: "\p{IsIdeographicDescriptionCharacters}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CJKSymbolsandPunctuation">
            <summary>
            3000 - 303F. Value: "\p{IsCJKSymbolsandPunctuation}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Hiragana">
            <summary>
            3040 - 309F. Value: "\p{IsHiragana}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Katakana">
            <summary>
            30A0 - 30FF. Value: "\p{IsKatakana}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Bopomofo">
            <summary>
            3100 - 312F. Value: "\p{IsBopomofo}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.HangulCompatibilityJamo">
            <summary>
            3130 - 318F. Value: "\p{IsHangulCompatibilityJamo}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Kanbun">
            <summary>
            3190 - 319F. Value: "\p{IsKanbun}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.BopomofoExtended">
            <summary>
            31A0 - 31BF. Value: "\p{IsBopomofoExtended}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.KatakanaPhoneticExtensions">
            <summary>
            31F0 - 31FF. Value: "\p{IsKatakanaPhoneticExtensions}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.EnclosedCJKLettersandMonths">
            <summary>
            3200 - 32FF. Value: "\p{IsEnclosedCJKLettersandMonths}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CJKCompatibility">
            <summary>
            3300 - 33FF. Value: "\p{IsCJKCompatibility}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CJKUnifiedIdeographsExtensionA">
            <summary>
            3400 - 4DBF. Value: "\p{IsCJKUnifiedIdeographsExtensionA}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.YijingHexagramSymbols">
            <summary>
            4DC0 - 4DFF. Value: "\p{IsYijingHexagramSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CJKUnifiedIdeographs">
            <summary>
            4E00 - 9FFF. Value: "\p{IsCJKUnifiedIdeographs}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.YiSyllables">
            <summary>
            A000 - A48F. Value: "\p{IsYiSyllables}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.YiRadicals">
            <summary>
            A490 - A4CF. Value: "\p{IsYiRadicals}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.HangulSyllables">
            <summary>
            AC00 - D7AF. Value: "\p{IsHangulSyllables}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.HighSurrogates">
            <summary>
            D800 - DB7F. Value: "\p{IsHighSurrogates}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.HighPrivateUseSurrogates">
            <summary>
            DB80 - DBFF. Value: "\p{IsHighPrivateUseSurrogates}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.LowSurrogates">
            <summary>
            DC00 - DFFF. Value: "\p{IsLowSurrogates}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.PrivateUse">
            <summary>
            E000 - F8FF. Value: "\p{IsPrivateUse}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.PrivateUseArea">
            <summary>
            E000 - F8FF. Value: "\p{IsPrivateUseArea}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CJKCompatibilityIdeographs">
            <summary>
            F900 - FAFF. Value: "\p{IsCJKCompatibilityIdeographs}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.AlphabeticPresentationForms">
            <summary>
            FB00 - FB4F. Value: "\p{IsAlphabeticPresentationForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.ArabicPresentationFormsA">
            <summary>
            FB50 - FDFF. Value: "\p{IsArabicPresentationForms-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.VariationSelectors">
            <summary>
            FE00 - FE0F. Value: "\p{IsVariationSelectors}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CombiningHalfMarks">
            <summary>
            FE20 - FE2F. Value: "\p{IsCombiningHalfMarks}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.CJKCompatibilityForms">
            <summary>
            FE30 - FE4F. Value: "\p{IsCJKCompatibilityForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.SmallFormVariants">
            <summary>
            FE50 - FE6F. Value: "\p{IsSmallFormVariants}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.ArabicPresentationFormsB">
            <summary>
            FE70 - FEFF. Value: "\p{IsArabicPresentationForms-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.HalfwidthandFullwidthForms">
            <summary>
            FF00 - FFEF. Value: "\p{IsHalfwidthandFullwidthForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeBlock.Specials">
            <summary>
            FFF0 - FFFF. Value: "\p{IsSpecials}".
            </summary>
        </member>
        <member name="T:FluentRegex.PositiveUnicodeCategory">
            <summary>
            Unicode general categories values list.
            </summary>
            <remarks>
            Based on: 
            https://www.unicode.org/reports/tr44/#General_Category_Values, 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.3#SupportedUnicodeGeneralCategories and 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.8#SupportedUnicodeGeneralCategories.
            Accessed in: 26/05/2019.
            </remarks>
        </member>
        <member name="M:FluentRegex.PositiveUnicodeCategory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.PositiveUnicodeCategory"/> class.
            </summary>
            <param name="name">The category name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/> or consists only of white-space characters.</exception>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.UppercaseLetter">
            <summary>
            An uppercase letter. Value: "Lu".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.LowercaseLetter">
            <summary>
            A lowercase letter. Value : "Ll".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.TitlecaseLetter">
            <summary>
            A digraphic character, with first part uppercase. Value: "Lt"
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.ModifierLetter">
            <summary>
            A modifier letter. Value: "Lm".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.OtherLetter">
            <summary>
            Other letters, including syllables and ideographs. Value: "Lo".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Letter">
            <summary>
            All letter characters. Value: "L" ("Lu | Ll | Lt | Lm | Lo").
            <para><see cref="P:FluentRegex.PositiveUnicodeCategory.UppercaseLetter"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.LowercaseLetter"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.TitlecaseLetter"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.ModifierLetter"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.OtherLetter"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.NonspacingMark">
            <summary>
             A nonspacing combining mark (zero advance width). Value: "Mn".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.SpacingMark">
            <summary>
            A spacing combining mark (positive advance width). Value: "Mc".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.EnclosingMark">
            <summary>
            An enclosing combining mark. Value: "Me".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Mark">
            <summary>
            All diacritic marks. Value: "M" ("Mn | Mc | Me").
            <para><see cref="P:FluentRegex.PositiveUnicodeCategory.NonspacingMark"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.SpacingMark"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.EnclosingMark"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.DecimalNumber">
            <summary>
            A decimal digit. Value: "Nd".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.LetterNumber">
            <summary>
            A letterlike numeric character. Value: "Nl".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.OtherNumber">
            <summary>
            A numeric character of other type. Value: "No".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Number">
            <summary>
            All numbers. Value: "N" ("Nd | Nl | No").
            <para><see cref="P:FluentRegex.PositiveUnicodeCategory.DecimalNumber"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.LetterNumber"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.OtherNumber"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.ConnectorPunctuation">
            <summary>
            A connecting punctuation mark, like a tie. Value: "Pc".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.DashPunctuation">
            <summary>
            A dash or hyphen punctuation mark. Value: "Pd".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.OpenPunctuation">
            <summary>
            An opening punctuation mark(of a pair). Value: "Ps".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.ClosePunctuation">
            <summary>
            A closing punctuation mark(of a pair). Value: "Pe".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.InitialPunctuation">
            <summary>
            An initial quotation mark. Value: "Pi".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.FinalPunctuation">
            <summary>
            A final quotation mark. Value: "Pf"
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.OtherPunctuation">
            <summary>
            A punctuation mark of other type. Value: "Po"
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Punctuation">
            <summary>
            All punctuation characters. Value : "P" ("Pc | Pd | Ps | Pe | Pi | Pf | Po").
            <para><see cref="P:FluentRegex.PositiveUnicodeCategory.ConnectorPunctuation"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.DashPunctuation"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.OpenPunctuation"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.ClosePunctuation"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.InitialPunctuation"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.FinalPunctuation"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.OtherPunctuation"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.MathSymbol">
            <summary>
            A symbol of mathematical use. Value: "Sm".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.CurrencySymbol">
            <summary>
            A currency sign. Value: "Sc".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.ModifierSymbol">
            <summary>
            A non-letterlike modifier symbol. Value: "Sk".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.OtherSymbol">
            <summary>
            A symbol of other type. Value: "So".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Symbol">
            <summary>
            All symbols. Value: "S" ("Sm | Sc | Sk | So").
            <para><see cref="P:FluentRegex.PositiveUnicodeCategory.MathSymbol"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.CurrencySymbol"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.ModifierSymbol"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.OtherSymbol"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.SpaceSeparator">
            <summary>
            A space character(of various non-zero widths). Value: "Zs".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.LineSeparator">
            <summary>
            U+2028 LINE SEPARATOR only. Value: "Zl".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.ParagraphSeparator">
            <summary>
            U+2029 PARAGRAPH SEPARATOR only. Value: "Zp".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Separator">
            <summary>
            All separator characters. Value: "Z" ("Zs | Zl | Zp").
            <para><see cref="P:FluentRegex.PositiveUnicodeCategory.SpaceSeparator"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.LineSeparator"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.ParagraphSeparator"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Control">
            <summary>
            A C0 or C1 control code. Value: "Cc".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Format">
            <summary>
            A format control character. Value: "Cf".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Surrogate">
            <summary>
            A surrogate code point. Value: "Cs".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.PrivateUse">
            <summary>
            A private-use character. Value: "Co".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Unassigned">
            <summary>
            A reserved unassigned code point or a noncharacter. Value: "Cn".
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeCategory.Other">
            <summary>
            All control characters. Value "C" ("Cc | Cf | Cs | Co | Cn").
            <para><see cref="P:FluentRegex.PositiveUnicodeCategory.Control"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.Format"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.Surrogate"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.PrivateUse"/> | <see cref="P:FluentRegex.PositiveUnicodeCategory.Unassigned"/>.</para>
            </summary>
        </member>
        <member name="T:FluentRegex.PositiveUnicodeGroup">
            <summary>
            Positive Unicode named groups base class.
            </summary>
        </member>
        <member name="P:FluentRegex.PositiveUnicodeGroup.CompositeFormat">
            <summary>
            The regular expression format.
            </summary>
        </member>
        <member name="M:FluentRegex.PositiveUnicodeGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.PositiveUnicodeGroup"/> class.
            </summary>
            <param name="name">The block name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/> or consists only of white-space characters.</exception>
        </member>
        <member name="T:FluentRegex.Escapes">
            <summary>
            List of constant character escapes supported by regular expressions in .NET.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.Bell">
            <summary>
            Matches a bell (alarm) character, \u0007.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.Alarm">
            <summary>
            Matches a bell (alarm) character, \u0007.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.Backspace">
            <summary>
            Matches a backspace character, \u0008.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.Tab">
            <summary>
            Matches a tab character, \u0009.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.CarriageReturn">
            <summary>
            Matches a carriage return character, \u000D. Note that \r is not equivalent to the newline character, \n.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.VerticalTab">
            <summary>
            Matches a vertical tab character, \u000B.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.FormFeed">
            <summary>
            Matches a form feed character, \u000C.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.NewLine">
            <summary>
            Matches a new line character, \u000A.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.Escape">
            <summary>
            Matches an escape character, \u001B.
            </summary>
        </member>
        <member name="P:FluentRegex.Escapes.WindowsNewLine">
            <summary>
            Matches a new line character, \u000A, preceded or not by a carriage return character, \u000D.
            </summary>
        </member>
        <member name="T:FluentRegex.HexadecimalUnicode">
            <summary>
            A hexadecimal representation of a unicode character.
            </summary>
        </member>
        <member name="F:FluentRegex.HexadecimalUnicode.code">
            <summary>
            The hexadecimal code.
            </summary>
        </member>
        <member name="M:FluentRegex.HexadecimalUnicode.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="decimalCode">The character to be represented as hexadecimal.</param>
        </member>
        <member name="M:FluentRegex.HexadecimalUnicode.ToString">
            <summary>
            Converts this instance to a <see cref="T:System.String"/>.
            </summary>
            <returns>A regular expression pattern.</returns>
        </member>
        <member name="T:FluentRegex.ISubtractable">
            <summary>
            Represents a set of characters from which another set can be subtracted.
            </summary>
        </member>
        <member name="P:FluentRegex.ISubtractable.Set">
            <summary>
            Set of characters to be used in subtraction.
            </summary>
        </member>
        <member name="T:FluentRegex.IUnicodeBlock">
            <summary>
            Unicode named blocks values list.
            </summary>
            <remarks>
            Based on: 
            https://www.unicode.org/Public/UNIDATA/Blocks.txt, 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.3#supported-named-blocks and 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.8#supported-named-blocks.
            Accessed in: 26/05/2019.
            </remarks>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.BasicLatin">
            <summary>
            0000 - 007F. Value: "\p{IsBasicLatin}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Latin1Supplement">
            <summary>
            0080 - 00FF. Value: "\p{IsLatin-1Supplement}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.LatinExtendedA">
            <summary>
            0100 - 017F. Value: "\p{IsLatinExtended-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.LatinExtendedB">
            <summary>
            0180 - 024F. Value: "\p{IsLatinExtended-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.IPAExtensions">
            <summary>
            0250 - 02AF. Value: "\p{IsIPAExtensions}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.SpacingModifierLetters">
            <summary>
            02B0 - 02FF. Value: "\p{IsSpacingModifierLetters}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CombiningDiacriticalMarks">
            <summary>
            0300 - 036F. Value: "\p{IsCombiningDiacriticalMarks}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.GreekandCoptic">
            <summary>
            0370 - 03FF. Value: "\p{IsGreek}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.IsGreekandCoptic">
            <summary>
            0370 - 03FF. Value: "\p{IsGreekandCoptic}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Cyrillic">
            <summary>
            0400 - 04FF. Value: "\p{IsCyrillic}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CyrillicSupplement">
            <summary>
            0500 - 052F. Value: "\p{IsCyrillicSupplement}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Armenian">
            <summary>
            0530 - 058F. Value: "\p{IsArmenian}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Hebrew">
            <summary>
            0590 - 05FF. Value: "\p{IsHebrew}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Arabic">
            <summary>
            0600 - 06FF. Value: "\p{IsArabic}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Syriac">
            <summary>
            0700 - 074F. Value: "\p{IsSyriac}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Thaana">
            <summary>
            0780 - 07BF. Value: "\p{IsThaana}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Devanagari">
            <summary>
            0900 - 097F. Value: "\p{IsDevanagari}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Bengali">
            <summary>
            0980 - 09FF. Value: "\p{IsBengali}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Gurmukhi">
            <summary>
            0A00 - 0A7F. Value: "\p{IsGurmukhi}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Gujarati">
            <summary>
            0A80 - 0AFF. Value: "\p{IsGujarati}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Oriya">
            <summary>
            0B00 - 0B7F. Value: "\p{IsOriya}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Tamil">
            <summary>
            0B80 - 0BFF. Value: "\p{IsTamil}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Telugu">
            <summary>
            0C00 - 0C7F. Value: "\p{IsTelugu}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Kannada">
            <summary>
            0C80 - 0CFF. Value: "\p{IsKannada}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Malayalam">
            <summary>
            0D00 - 0D7F. Value: "\p{IsMalayalam}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Sinhala">
            <summary>
            0D80 - 0DFF. Value: "\p{IsSinhala}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Thai">
            <summary>
            0E00 - 0E7F. Value: "\p{IsThai}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Lao">
            <summary>
            0E80 - 0EFF. Value: "\p{IsLao}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Tibetan">
            <summary>
            0F00 - 0FFF. Value: "\p{IsTibetan}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Myanmar">
            <summary>
            1000 - 109F. Value: "\p{IsMyanmar}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Georgian">
            <summary>
            10A0 - 10FF. Value: "\p{IsGeorgian}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.HangulJamo">
            <summary>
            1100 - 11FF. Value: "\p{IsHangulJamo}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Ethiopic">
            <summary>
            1200 - 137F. Value: "\p{IsEthiopic}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Cherokee">
            <summary>
            13A0 - 13FF. Value: "\p{IsCherokee}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.UnifiedCanadianAboriginalSyllabics">
            <summary>
            1400 - 167F. Value: "\p{IsUnifiedCanadianAboriginalSyllabics}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Ogham">
            <summary>
            1680 - 169F. Value: "\p{IsOgham}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Runic">
            <summary>
            16A0 - 16FF. Value: "\p{IsRunic}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Tagalog">
            <summary>
            1700 - 171F. Value: "\p{IsTagalog}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Hanunoo">
            <summary>
            1720 - 173F. Value: "\p{IsHanunoo}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Buhid">
            <summary>
            1740 - 175F. Value: "\p{IsBuhid}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Tagbanwa">
            <summary>
            1760 - 177F. Value: "\p{IsTagbanwa}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Khmer">
            <summary>
            1780 - 17FF. Value: "\p{IsKhmer}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Mongolian">
            <summary>
            1800 - 18AF. Value: "\p{IsMongolian}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Limbu">
            <summary>
            1900 - 194F. Value: "\p{IsLimbu}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.TaiLe">
            <summary>
            1950 - 197F. Value: "\p{IsTaiLe}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.KhmerSymbols">
            <summary>
            19E0 - 19FF. Value: "\p{IsKhmerSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.PhoneticExtensions">
            <summary>
            1D00 - 1D7F. Value: "\p{IsPhoneticExtensions}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.LatinExtendedAdditional">
            <summary>
            1E00 - 1EFF. Value: "\p{IsLatinExtendedAdditional}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.GreekExtended">
            <summary>
            1F00 - 1FFF. Value: "\p{IsGreekExtended}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.GeneralPunctuation">
            <summary>
            2000 - 206F. Value: "\p{IsGeneralPunctuation}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.SuperscriptsandSubscripts">
            <summary>
            2070 - 209F. Value: "\p{IsSuperscriptsandSubscripts}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CurrencySymbols">
            <summary>
            20A0 - 20CF. Value: "\p{IsCurrencySymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CombiningDiacriticalMarksforSymbols">
            <summary>
            20D0 - 20FF. Value: "\p{IsCombiningDiacriticalMarksforSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.IsCombiningMarksforSymbols">
            <summary>
            20D0 - 20FF. Value: "\p{"IsCombiningMarksforSymbols"}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.LetterlikeSymbols">
            <summary>
            2100 - 214F. Value: "\p{IsLetterlikeSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.NumberForms">
            <summary>
            2150 - 218F. Value: "\p{IsNumberForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Arrows">
            <summary>
            2190 - 21FF. Value: "\p{IsArrows}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.MathematicalOperators">
            <summary>
            2200 - 22FF. Value: "\p{IsMathematicalOperators}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.MiscellaneousTechnical">
            <summary>
            2300 - 23FF. Value: "\p{IsMiscellaneousTechnical}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.ControlPictures">
            <summary>
            2400 - 243F. Value: "\p{IsControlPictures}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.OpticalCharacterRecognition">
            <summary>
            2440 - 245F. Value: "\p{IsOpticalCharacterRecognition}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.EnclosedAlphanumerics">
            <summary>
            2460 - 24FF. Value: "\p{IsEnclosedAlphanumerics}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.BoxDrawing">
            <summary>
            2500 - 257F. Value: "\p{IsBoxDrawing}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.BlockElements">
            <summary>
            2580 - 259F. Value: "\p{IsBlockElements}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.GeometricShapes">
            <summary>
            25A0 - 25FF. Value: "\p{IsGeometricShapes}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.MiscellaneousSymbols">
            <summary>
            2600 - 26FF. Value: "\p{IsMiscellaneousSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Dingbats">
            <summary>
            2700 - 27BF. Value: "\p{IsDingbats}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.MiscellaneousMathematicalSymbolsA">
            <summary>
            27C0 - 27EF. Value: "\p{IsMiscellaneousMathematicalSymbols-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.SupplementalArrowsA">
            <summary>
            27F0 - 27FF. Value: "\p{IsSupplementalArrows-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.BraillePatterns">
            <summary>
            2800 - 28FF. Value: "\p{IsBraillePatterns}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.SupplementalArrowsB">
            <summary>
            2900 - 297F. Value: "\p{IsSupplementalArrows-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.MiscellaneousMathematicalSymbolsB">
            <summary>
            2980 - 29FF. Value: "\p{IsMiscellaneousMathematicalSymbols-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.SupplementalMathematicalOperators">
            <summary>
            2A00 - 2AFF. Value: "\p{IsSupplementalMathematicalOperators}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.MiscellaneousSymbolsandArrows">
            <summary>
            2B00 - 2BFF. Value: "\p{IsMiscellaneousSymbolsandArrows}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CJKRadicalsSupplement">
            <summary>
            2E80 - 2EFF. Value: "\p{IsCJKRadicalsSupplement}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.KangxiRadicals">
            <summary>
            2F00 - 2FDF. Value: "\p{IsKangxiRadicals}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.IdeographicDescriptionCharacters">
            <summary>
            2FF0 - 2FFF. Value: "\p{IsIdeographicDescriptionCharacters}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CJKSymbolsandPunctuation">
            <summary>
            3000 - 303F. Value: "\p{IsCJKSymbolsandPunctuation}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Hiragana">
            <summary>
            3040 - 309F. Value: "\p{IsHiragana}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Katakana">
            <summary>
            30A0 - 30FF. Value: "\p{IsKatakana}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Bopomofo">
            <summary>
            3100 - 312F. Value: "\p{IsBopomofo}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.HangulCompatibilityJamo">
            <summary>
            3130 - 318F. Value: "\p{IsHangulCompatibilityJamo}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Kanbun">
            <summary>
            3190 - 319F. Value: "\p{IsKanbun}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.BopomofoExtended">
            <summary>
            31A0 - 31BF. Value: "\p{IsBopomofoExtended}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.KatakanaPhoneticExtensions">
            <summary>
            31F0 - 31FF. Value: "\p{IsKatakanaPhoneticExtensions}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.EnclosedCJKLettersandMonths">
            <summary>
            3200 - 32FF. Value: "\p{IsEnclosedCJKLettersandMonths}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CJKCompatibility">
            <summary>
            3300 - 33FF. Value: "\p{IsCJKCompatibility}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CJKUnifiedIdeographsExtensionA">
            <summary>
            3400 - 4DBF. Value: "\p{IsCJKUnifiedIdeographsExtensionA}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.YijingHexagramSymbols">
            <summary>
            4DC0 - 4DFF. Value: "\p{IsYijingHexagramSymbols}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CJKUnifiedIdeographs">
            <summary>
            4E00 - 9FFF. Value: "\p{IsCJKUnifiedIdeographs}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.YiSyllables">
            <summary>
            A000 - A48F. Value: "\p{IsYiSyllables}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.YiRadicals">
            <summary>
            A490 - A4CF. Value: "\p{IsYiRadicals}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.HangulSyllables">
            <summary>
            AC00 - D7AF. Value: "\p{IsHangulSyllables}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.HighSurrogates">
            <summary>
            D800 - DB7F. Value: "\p{IsHighSurrogates}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.HighPrivateUseSurrogates">
            <summary>
            DB80 - DBFF. Value: "\p{IsHighPrivateUseSurrogates}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.LowSurrogates">
            <summary>
            DC00 - DFFF. Value: "\p{IsLowSurrogates}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.PrivateUse">
            <summary>
            E000 - F8FF. Value: "\p{IsPrivateUse}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.PrivateUseArea">
            <summary>
            E000 - F8FF. Value: "\p{IsPrivateUseArea}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CJKCompatibilityIdeographs">
            <summary>
            F900 - FAFF. Value: "\p{IsCJKCompatibilityIdeographs}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.AlphabeticPresentationForms">
            <summary>
            FB00 - FB4F. Value: "\p{IsAlphabeticPresentationForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.ArabicPresentationFormsA">
            <summary>
            FB50 - FDFF. Value: "\p{IsArabicPresentationForms-A}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.VariationSelectors">
            <summary>
            FE00 - FE0F. Value: "\p{IsVariationSelectors}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CombiningHalfMarks">
            <summary>
            FE20 - FE2F. Value: "\p{IsCombiningHalfMarks}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.CJKCompatibilityForms">
            <summary>
            FE30 - FE4F. Value: "\p{IsCJKCompatibilityForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.SmallFormVariants">
            <summary>
            FE50 - FE6F. Value: "\p{IsSmallFormVariants}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.ArabicPresentationFormsB">
            <summary>
            FE70 - FEFF. Value: "\p{IsArabicPresentationForms-B}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.HalfwidthandFullwidthForms">
            <summary>
            FF00 - FFEF. Value: "\p{IsHalfwidthandFullwidthForms}".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeBlock.Specials">
            <summary>
            FFF0 - FFFF. Value: "\p{IsSpecials}".
            </summary>
        </member>
        <member name="T:FluentRegex.IUnicodeCategory">
            <summary>
            Unicode general categories values list.
            </summary>
            <remarks>
            Based on: 
            https://www.unicode.org/reports/tr44/#General_Category_Values, 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.3#SupportedUnicodeGeneralCategories and 
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions?view=netframework-4.8#SupportedUnicodeGeneralCategories.
            Accessed in: 26/05/2019.
            </remarks>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.UppercaseLetter">
            <summary>
            An uppercase letter. Value: "Lu".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.LowercaseLetter">
            <summary>
            A lowercase letter. Value : "Ll".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.TitlecaseLetter">
            <summary>
            A digraphic character, with first part uppercase. Value: "Lt"
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.ModifierLetter">
            <summary>
            A modifier letter. Value: "Lm".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.OtherLetter">
            <summary>
            Other letters, including syllables and ideographs. Value: "Lo".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Letter">
            <summary>
            All letter characters. Value: "L" ("Lu | Ll | Lt | Lm | Lo").
            <para><see cref="P:FluentRegex.IUnicodeCategory.UppercaseLetter"/> | <see cref="P:FluentRegex.IUnicodeCategory.LowercaseLetter"/> | <see cref="P:FluentRegex.IUnicodeCategory.TitlecaseLetter"/> | <see cref="P:FluentRegex.IUnicodeCategory.ModifierLetter"/> | <see cref="P:FluentRegex.IUnicodeCategory.OtherLetter"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.NonspacingMark">
            <summary>
             A nonspacing combining mark (zero advance width). Value: "Mn".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.SpacingMark">
            <summary>
            A spacing combining mark (positive advance width). Value: "Mc".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.EnclosingMark">
            <summary>
            An enclosing combining mark. Value: "Me".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Mark">
            <summary>
            All diacritic marks. Value: "M" ("Mn | Mc | Me").
            <para><see cref="P:FluentRegex.IUnicodeCategory.NonspacingMark"/> | <see cref="P:FluentRegex.IUnicodeCategory.SpacingMark"/> | <see cref="P:FluentRegex.IUnicodeCategory.EnclosingMark"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.DecimalNumber">
            <summary>
            A decimal digit. Value: "Nd".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.LetterNumber">
            <summary>
            A letterlike numeric character. Value: "Nl".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.OtherNumber">
            <summary>
            A numeric character of other type. Value: "No".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Number">
            <summary>
            All numbers. Value: "N" ("Nd | Nl | No").
            <para><see cref="P:FluentRegex.IUnicodeCategory.DecimalNumber"/> | <see cref="P:FluentRegex.IUnicodeCategory.LetterNumber"/> | <see cref="P:FluentRegex.IUnicodeCategory.OtherNumber"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.ConnectorPunctuation">
            <summary>
            A connecting punctuation mark, like a tie. Value: "Pc".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.DashPunctuation">
            <summary>
            A dash or hyphen punctuation mark. Value: "Pd".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.OpenPunctuation">
            <summary>
            An opening punctuation mark(of a pair). Value: "Ps".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.ClosePunctuation">
            <summary>
            A closing punctuation mark(of a pair). Value: "Pe".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.InitialPunctuation">
            <summary>
            An initial quotation mark. Value: "Pi".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.FinalPunctuation">
            <summary>
            A final quotation mark. Value: "Pf"
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.OtherPunctuation">
            <summary>
            A punctuation mark of other type. Value: "Po"
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Punctuation">
            <summary>
            All punctuation characters. Value : "P" ("Pc | Pd | Ps | Pe | Pi | Pf | Po").
            <para><see cref="P:FluentRegex.IUnicodeCategory.ConnectorPunctuation"/> | <see cref="P:FluentRegex.IUnicodeCategory.DashPunctuation"/> | <see cref="P:FluentRegex.IUnicodeCategory.OpenPunctuation"/> | <see cref="P:FluentRegex.IUnicodeCategory.ClosePunctuation"/> | <see cref="P:FluentRegex.IUnicodeCategory.InitialPunctuation"/> | <see cref="P:FluentRegex.IUnicodeCategory.FinalPunctuation"/> | <see cref="P:FluentRegex.IUnicodeCategory.OtherPunctuation"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.MathSymbol">
            <summary>
            A symbol of mathematical use. Value: "Sm".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.CurrencySymbol">
            <summary>
            A currency sign. Value: "Sc".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.ModifierSymbol">
            <summary>
            A non-letterlike modifier symbol. Value: "Sk".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.OtherSymbol">
            <summary>
            A symbol of other type. Value: "So".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Symbol">
            <summary>
            All symbols. Value: "S" ("Sm | Sc | Sk | So").
            <para><see cref="P:FluentRegex.IUnicodeCategory.MathSymbol"/> | <see cref="P:FluentRegex.IUnicodeCategory.CurrencySymbol"/> | <see cref="P:FluentRegex.IUnicodeCategory.ModifierSymbol"/> | <see cref="P:FluentRegex.IUnicodeCategory.OtherSymbol"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.SpaceSeparator">
            <summary>
            A space character(of various non-zero widths). Value: "Zs".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.LineSeparator">
            <summary>
            U+2028 LINE SEPARATOR only. Value: "Zl".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.ParagraphSeparator">
            <summary>
            U+2029 PARAGRAPH SEPARATOR only. Value: "Zp".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Separator">
            <summary>
            All separator characters. Value: "Z" ("Zs | Zl | Zp").
            <para><see cref="P:FluentRegex.IUnicodeCategory.SpaceSeparator"/> | <see cref="P:FluentRegex.IUnicodeCategory.LineSeparator"/> | <see cref="P:FluentRegex.IUnicodeCategory.ParagraphSeparator"/>.</para>
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Control">
            <summary>
            A C0 or C1 control code. Value: "Cc".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Format">
            <summary>
            A format control character. Value: "Cf".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Surrogate">
            <summary>
            A surrogate code point. Value: "Cs".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.PrivateUse">
            <summary>
            A private-use character. Value: "Co".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Unassigned">
            <summary>
            A reserved unassigned code point or a noncharacter. Value: "Cn".
            </summary>
        </member>
        <member name="P:FluentRegex.IUnicodeCategory.Other">
            <summary>
            All control characters. Value "C" ("Cc | Cf | Cs | Co | Cn").
            <para><see cref="P:FluentRegex.IUnicodeCategory.Control"/> | <see cref="P:FluentRegex.IUnicodeCategory.Format"/> | <see cref="P:FluentRegex.IUnicodeCategory.Surrogate"/> | <see cref="P:FluentRegex.IUnicodeCategory.PrivateUse"/> | <see cref="P:FluentRegex.IUnicodeCategory.Unassigned"/>.</para>
            </summary>
        </member>
        <member name="T:FluentRegex.MatchingBehavior">
            <summary>
            The matching behavior for a sub-term of the expression.
            </summary>
        </member>
        <member name="F:FluentRegex.MatchingBehavior.Default">
            <summary>
            Uses the default behavior of the expression for the term.
            </summary>
        </member>
        <member name="F:FluentRegex.MatchingBehavior.ECMAScript">
            <summary>
            Enables ECMAScript-compliant behavior for the term. Independent of the behavior of the expression.
            </summary>
        </member>
        <member name="F:FluentRegex.MatchingBehavior.Unicode">
            <summary>
            Enables canonical behavior for the term. Independent of the behavior of the expression.
            </summary>
        </member>
        <member name="F:FluentRegex.MatchingBehavior.Canonical">
            <summary>
            Enables canonical behavior for the term. Independent of the behavior of the expression.
            </summary>
        </member>
        <member name="T:FluentRegex.Pattern">
            <summary>
            Typified help in building regular expressions pattern.
            </summary>
            <summary>
            Typified help in building regular expressions pattern.
            </summary>
            <summary>
            Typified help in building regular expressions pattern.
            </summary>
            <summary>
            Typified help in building regular expressions pattern.
            </summary>
        </member>
        <member name="M:FluentRegex.Pattern.AtStartOfStringOrLine">
            <summary>
            By default, the match must occur at the beginning of the string; in multiline mode, it must occur at the beginning of the line.
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AtEndOfStringOrLine">
            <summary>
            By default, the match must occur at the end of the string or before \n at the end of the string; in multiline mode, it must occur before the end of the line or before \n at the end of the line.
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AtStartOfStringOnly">
            <summary>
            The match must occur at the beginning of the string only (no multiline support).
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AtEndOfStringOrBeforeEndingNewline">
            <summary>
            The match must occur at the end of the string, or before \n at the end of the string.
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AtEndOfStringOnly">
            <summary>
            The match must occur at the end of the string only.
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AtContiguousMatches">
            <summary>
            The match must start at the position where the previous match ended.
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AtWordBoundary">
            <summary>
            The match must occur on a word boundary.
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AtNonWordBoundary">
            <summary>
            The match must not occur on a word boundary.
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AnyIn(System.String,System.Boolean)">
            <summary>
            Matches any single character in <paramref name="set"/>. By default, the match is case-sensitive.
            Pattern: "[set]".
            </summary>
            <param name="set">The set of characters to be matched.</param>
            <param name="escape">Indicates whether the character set (\, *, +, ?, |, {, [, (,), ^, $, ., #, and white space) should be replaced with their escape codes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is <see cref="F:System.String.Empty"/>.</exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AnyIn(System.Char[])">
            <summary>
            Matches any single character in <paramref name="set"/>. By default, the match is case-sensitive.
            Pattern: "[^set]".
            </summary>
            <param name="set">The set of characters to be matched.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is empty.</exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Range(System.Char,System.Char,System.Boolean)">
            <summary>
            Character range: Matches any single character in the range from <paramref name="first"/> to <paramref name="last"/>.
            Pattern: "[first-last]".
            </summary>
            <param name="first">The first character in the range.</param>
            <param name="last">The last character in the range.</param>
            <param name="caseSensitive">If it must be case-sensitive.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Range(System.UInt32,System.UInt32)">
            <summary>
            Character range: Matches any single decimal digit in the range from <paramref name="first"/> to <paramref name="last"/>.
            Pattern: "[first-last]".
            </summary>
            <param name="first">The first digit in the range.</param>
            <param name="last">The last digit in the range.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="first"/> or <paramref name="last"/> are greater as 9.</exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Any">
            <summary>
            Wildcard: Matches any single character.
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AnyNotIn(System.String,System.Boolean)">
            <summary>
            Negation: Matches any single character that is not in <paramref name="set"/>. By default, the match is case-sensitive.
            Pattern: "[^set]".
            </summary>
            <param name="set">The set of characters to be not matched.</param>
            <param name="escape">Indicates whether the character set (\, *, +, ?, |, {, [, (,), ^, $, ., #, and white space) should be replaced with their escape codes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is <see cref="F:System.String.Empty"/>.</exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.AnyNotIn(System.Char[])">
            <summary>
            Negation: Matches any single character that is not in <paramref name="set"/>. By default, the match is case-sensitive.
            Pattern: "[^set]".
            </summary>
            <param name="set">The set of characters to be not matched.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="set"/> is empty.</exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.NotInRange(System.Char,System.Char,System.Boolean)">
            <summary>
            Character range: Matches any single character that is not in the range from <paramref name="first"/> to <paramref name="last"/>.
            Pattern: "[^first-last]".
            </summary>
            <param name="first">The first character in the range.</param>
            <param name="last">The last character in the range.</param>
            <param name="caseSensitive">If it must be case-sensitive.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.NotInRange(System.UInt32,System.UInt32)">
            <summary>
            Character range: Matches any single decimal digit that is not in the range from <paramref name="first"/> to <paramref name="last"/>.
            Pattern: "[^first-last]".
            </summary>
            <param name="first">The first decimal digit in the range.</param>
            <param name="last">The last decimal digit in the range.</param>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> is greater as <paramref name="last"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="first"/> or <paramref name="last"/> are greater as 9.</exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Add(FluentRegex.Stringable)">
            <summary>
            Matches any single character in the Unicode general category specified by <paramref name="term"/>.
            Pattern: "\p{category}".
            </summary>
            <param name="term">The Unicode general category, <see cref="T:FluentRegex.IUnicodeCategory"/>).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="term"/> is <see langword="null"/></exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Word(FluentRegex.MatchingBehavior)">
            <summary>
            Matches any word character.
            Pattern: Default: "\w", ECMAScript: "[a-zA-Z_0-9]", Canonical: "[\p{L}\p{Mn}\p{Nd}\p{Pc}]".
            </summary>
            <param name="matchingBehavior">The matching behavior for the term.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.NonWord(FluentRegex.MatchingBehavior)">
            <summary>
            Matches any non-word character.
            Pattern: Default: "\W", ECMAScript: "[^a-zA-Z_0-9]", Canonical: "[^\p{L}\p{Mn}\p{Nd}\p{Pc}]".
            </summary>
            <param name="matchingBehavior">The matching behavior for the term.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.ECMAScriptWord">
            <summary>
            Matches any alphanumeric or underscore character.
            Pattern: "[a-zA-Z_0-9]".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.ECMAScriptNonWord">
            <summary>
            Matches any non alphanumeric or underscore character.
            Pattern: "[^a-zA-Z_0-9]".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.UnicodeWord">
            <summary>
            Matches any Unicode non word character.
            Pattern: "[^\p{L}\p{Mn}\p{Nd}\p{Pc}]".
            <para><see cref="P:FluentRegex.IUnicodeCategory.Letter"/> | <see cref="P:FluentRegex.IUnicodeCategory.NonspacingMark"/> | <see cref="P:FluentRegex.IUnicodeCategory.DecimalNumber"/> | <see cref="P:FluentRegex.IUnicodeCategory.ConnectorPunctuation"/>.</para>
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.UnicodeNonWord">
            <summary>
            Matches any non Unicode word character.
            Pattern: "[^\p{L}\p{Mn}\p{Nd}\p{Pc}]".
            <para><see cref="P:FluentRegex.IUnicodeCategory.Letter"/> | <see cref="P:FluentRegex.IUnicodeCategory.NonspacingMark"/> | <see cref="P:FluentRegex.IUnicodeCategory.DecimalNumber"/> | <see cref="P:FluentRegex.IUnicodeCategory.ConnectorPunctuation"/>.</para>
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.WhiteSpace(FluentRegex.MatchingBehavior)">
            <summary>
            Matches any white-space character.
            Pattern: Default: "\s", ECMAScript: "[ \f\n\r\t\v]", Canonical: "[\f\n\r\t\v\x85\p{Z}]".
            </summary>
            <param name="matchingBehavior">The matching behavior for the term.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.ECMAScriptWhiteSpace">
            <summary>
            Matches any white-space character.
            Pattern: "[ \f\n\r\t\v]".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.UnicodeWhiteSpace">
            <summary>
            Matches any white-space character.
            Pattern: "[\f\n\r\t\v\x85\p{Z}]".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.NonWhiteSpace(FluentRegex.MatchingBehavior)">
            <summary>
            Matches any non-white-space character.
            Pattern: Default: "\S", ECMAScript: "[^ \f\n\r\t\v]", Canonical: "[^\f\n\r\t\v\x85\p{Z}]".
            </summary>
            <param name="matchingBehavior">The matching behavior for the term.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.ECMAScriptNonWhiteSpace">
            <summary>
            Matches any non-white-space character.
            Pattern: "[^ \f\n\r\t\v]".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.UnicodeNonWhiteSpace">
            <summary>
            Matches any non-white-space character.
            Pattern: "[^\f\n\r\t\v\x85\p{Z}]".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Digit(FluentRegex.MatchingBehavior)">
            <summary>
            Matches any decimal digit.
            Pattern: Default: "\d", ECMAScript: "[0-9]", Canonical: "\p{Nd}".
            </summary>
            <param name="matchingBehavior">The matching behavior for the term.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.ECMAScriptDigit">
            <summary>
            Matches any decimal digit.
            Pattern: "[0-9]".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.UnicodeDigit">
            <summary>
            Matches any decimal digit.
            Pattern: "\p{Nd}".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.NonDigit(FluentRegex.MatchingBehavior)">
            <summary>
            Matches any character other than a decimal digit.
            </summary>
            Pattern: Default: "\D", ECMAScript: "[^0-9]", Canonical: "\P{Nd}".
            <param name="matchingBehavior">The matching behavior for the term.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.ECMAScriptNonDigit">
            <summary>
            Matches any character other than a decimal digit.
            Pattern: "[^0-9]".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.UnicodeNonDigit">
            <summary>
            Matches any character other than a decimal digit.
            Pattern: "\P{Nd}".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Subtraction(FluentRegex.CharacterGroup,FluentRegex.CharacterGroup)">
            <summary>
            Character class subtraction yields a set of characters that is the result of excluding the characters in one character class from another character class.
            </summary>
            <param name="baseGroup"></param>
            <param name="excludedGroup"></param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.ToString">
            <summary>
            Converts this instance to a regular expression pattern.
            </summary>
            <returns>A regular expression pattern.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.#ctor">
            <summary>
            Initializes an instance of the class.
            </summary>
        </member>
        <member name="M:FluentRegex.Pattern.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance of the class and add <paramref name="term"/> to the expression.
            </summary>
            <param name="term">Initial term of the expression.</param>
            <param name="escape">Indicates whether the character set (\, *, +, ?, |, {, [, (,), ^, $, ., #, and white space) should be replaced with their escape codes.</param>
        </member>
        <member name="P:FluentRegex.Pattern.PatternBuilder">
            <summary>
            Regular expression pattern builder.
            </summary>
        </member>
        <member name="M:FluentRegex.Pattern.Add(System.String,System.Boolean)">
            <summary>
            Adds a trivial term to the expression.
            </summary>
            <param name="term">Term to be added to the expression.</param>
            <param name="escape">Indicates whether the character set (\, *, +, ?, |, {, [, (,), ^, $, ., #, and white space) should be replaced with their escape codes.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Bell">
            <summary>
            Matches a bell (alarm) character, \u0007.
            Pattern: "\u0007".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Backspace">
            <summary>
            In a character class, matches a backspace, \u0008.
            Pattern: "\u0008".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Tab">
            <summary>
            Matches a tab, \u0009.
            Pattern: "\u0009".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.CarriageReturn">
            <summary>
            Matches a carriage return, \u000D. ("\r" is not equivalent to the newline character, "\n".)
            Pattern: "\u000D".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.VerticalTab">
            <summary>
            Matches a vertical tab, \u000B.
            Pattern: "\u000B".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.FormFeed">
            <summary>
            Matches a form feed, \u000C.
            Pattern: "\u000C".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.NewLine(System.Boolean)">
            <summary>
            Matches a new line, \u000A.
            Pattern: "\u000A" or "\u000D?\u000A".
            </summary>
            <param name="windowsMode">If <see langword="true"/> match also '\r\n'. Pattern: "\u000D?\u000A".</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Escape">
            <summary>
            Matches an escape, \u001B.
            Pattern: "\u001B".
            </summary>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Octal(System.String)">
            <summary>
            Matches an ASCII character, where nnn consists of two or three digits that represent the octal character code.
            Pattern: "\nnn".
            </summary>
            <example>
            For example, \040 represents a space character.
            </example>
            <param name="octalNumber">Octal equivalent of the character to be matched.</param>
            <exception cref="T:System.ArgumentException"><paramref name="octalNumber"/> is prefixed with a negative sign.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="octalNumber"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="octalNumber"/> length is not 2 or 3 or <paramref name="octalNumber"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="octalNumber"/> contains a character that is not a valid digit in the octal base.</exception>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Hexadecimal(System.String)">
            <summary>
            Matches an ASCII character, where nn is a two-digit hexadecimal character code.
            Pattern: "\xnn".
            </summary>
            <param name="hexadecimalNumber">Hexadecimal equivalent of the character to be matched.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="hexadecimalNumber"/> is prefixed with a negative sign.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="hexadecimalNumber"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="hexadecimalNumber"/> length is not 2 or <paramref name="hexadecimalNumber"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="hexadecimalNumber"/> contains a character that is not a valid digit in the hexadecimal base.</exception>
        </member>
        <member name="M:FluentRegex.Pattern.ASCIIControl(System.Char)">
            <summary>
            Matches the ASCII control character that is specified by X or x, where X or x is the letter of the control character.
            Pattern: "\cX" or "\cx".
            </summary>
            <param name="controlCharacter">The letter of the control character.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="M:FluentRegex.Pattern.Unicode(System.String)">
            <summary>
            Matches a Unicode character by using hexadecimal representation (exactly four digits, as represented by nnnn).
            Pattern: "\unnnn".
            </summary>
            <param name="hexadecimal">The hexadecimal representation.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="hexadecimal"/> is prefixed with a negative sign.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="hexadecimal"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="hexadecimal"/> length is not 4 or <paramref name="hexadecimal"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="hexadecimal"/> contains a character that is not a valid digit in the hexadecimal base.</exception>
        </member>
        <member name="M:FluentRegex.Pattern.Literal(System.Char)">
            <summary>
            Matches a character that is not recognized as an escape character.
            Pattern: "\c".
            </summary>
            <example>
            For example, \* is the same as \x2A, and \. is the same as \x2E. This allows the regular expression engine to disambiguate language elements (such as * or ?) and character literals (represented by \* or \?).
            </example>
            <param name="character">The character to be matched.</param>
            <returns>Current instance of <see cref="T:FluentRegex.Pattern"/>.</returns>
        </member>
        <member name="T:FluentRegex.Stringable">
            <summary>
            Provides a way to represent the current object as a string.
            </summary>
        </member>
        <member name="M:FluentRegex.Stringable.op_Equality(FluentRegex.Stringable,FluentRegex.Stringable)">
            <summary>
            Determines whether two specified <see cref="T:FluentRegex.Stringable"/> have the same value.
            </summary>
            <param name="stringable1">The first <see cref="T:FluentRegex.Stringable"/> to compare, or <see langword="null"/>.</param>
            <param name="stringable2">The second <see cref="T:FluentRegex.Stringable"/> to compare, or <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="stringable1"/> is the same as the value of <paramref name="stringable2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:FluentRegex.Stringable.op_Inequality(FluentRegex.Stringable,FluentRegex.Stringable)">
            <summary>
            Determines whether two specified <see cref="T:FluentRegex.Stringable"/> have the different value.
            </summary>
            <param name="stringable1">The first <see cref="T:FluentRegex.Stringable"/> to compare, or <see langword="null"/>.</param>
            <param name="stringable2">The second <see cref="T:FluentRegex.Stringable"/> to compare, or <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="stringable1"/> is different from the value of <paramref name="stringable2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:FluentRegex.Stringable.Equals(System.Object)">
            <summary>
            Determines whether two objects of type <see cref="T:FluentRegex.Stringable"/> are equal.
            </summary>
            <param name="obj">The <see cref="T:FluentRegex.Stringable"/> to compare to this instance.</param>
            <exception cref="T:System.NullReferenceException">The current instance is <see langword="null"/>.</exception>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:FluentRegex.Stringable"/> and its value is the same as this instance; otherwise, <see langword="false"/>. If <paramref name="obj"/> is <see langword="null"/>, the method returns <see langword="false"/>.</returns>
        </member>
        <member name="M:FluentRegex.Stringable.GetHashCode">
            <summary>
            Serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="M:FluentRegex.Stringable.op_Implicit(FluentRegex.Stringable)~System.String">
            <summary>
            Implicit conversion to string.
            </summary>
            <param name="stringable">An instance to be converted to string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stringable"/> is <see langword="null"/></exception>
        </member>
        <member name="M:FluentRegex.Stringable.ToString">
            <summary>
            Converts this instance to a regular expression pattern that can be passed to a <see cref="T:System.Text.RegularExpressions.Regex"/> constructor.
            </summary>
            <returns>A regular expression pattern.</returns>
        </member>
        <member name="T:FluentRegex.UnicodeGroup">
            <summary>
            Unicode named groups base class.
            </summary>
        </member>
        <member name="P:FluentRegex.UnicodeGroup.CompositeFormat">
            <summary>
            The regular expression format.
            </summary>
        </member>
        <member name="M:FluentRegex.UnicodeGroup.ToString">
            <summary>
            Converts this instance to a regular expression pattern that can be passed to a <see cref="T:System.Text.RegularExpressions.Regex"/> constructor.
            </summary>
            <returns>A regular expression character class.</returns>
        </member>
        <member name="P:FluentRegex.UnicodeGroup.Name">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="M:FluentRegex.UnicodeGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentRegex.UnicodeGroup"/> class.
            </summary>
            <param name="name">The block name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/> or consists only of white-space characters.</exception>
        </member>
    </members>
</doc>
